/* -*- c++ -*- */
/*
 * Copyright 2004,2010 Free Software Foundation, Inc.f
 *
 * This file is part of GNU Radio
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>
#include <gr_count_bits.h>
#include <cstdlib>


#include <howto_compare_vector_cci.h>
#include <gr_io_signature.h>

/*
 * Create a new instance of howto_compare_vector_cci and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
howto_compare_vector_cci_sptr
howto_make_compare_vector_cci (const std::vector<unsigned char> &data, const std::vector<unsigned char> &preamble,  unsigned short iteration_data_reg, unsigned short min_threshold_error, bool repeat)
{
  return gnuradio::get_initial_sptr(new howto_compare_vector_cci(data, preamble, iteration_data_reg, min_threshold_error, repeat));
}

/*
 * Specify constraints on number of input and output streams.
 * This info is used to construct the input and output signatures
 * (2nd & 3rd args to gr_block's constructor).  The input and
 * output signatures are used by the runtime system to
 * check that a valid number and type of inputs and outputs
 * are connected to this block.  In this case, we accept
 * only 1 input and 1 output.
 */
static const int MIN_IN = 1;	// mininum number of input streams
static const int MAX_IN = 1;	// maximum number of input streams
static const int MIN_OUT = 1;	// minimum number of output streams
static const int MAX_OUT = 1;	// maximum number of output streams

/*
 * The private constructor
 */
howto_compare_vector_cci::howto_compare_vector_cci (const std::vector<unsigned char> &data, const std::vector<unsigned char> &preamble, unsigned short iteration_data_reg, unsigned short min_threshold_error,  bool repeat)
  : gr_block ("compare_vector_cci",
	      gr_make_io_signature (MIN_IN, MAX_IN, sizeof (unsigned char)),
	      gr_make_io_signature (MIN_OUT, MAX_OUT, sizeof (unsigned char))),
	      d_data (data),
	      d_preamble (preamble),
	      d_iteration_data_reg (iteration_data_reg),
	      d_min_threshold_error (min_threshold_error),
	      d_repeat (repeat)
{
	d_shift_reg = 0;
	d_vector_reg = 0;

	is_same_vector_number = 0;
	number_bits = 0;
	d_preamble_reg = 0;

	d_size = d_data.size();
	d_preamble_size = d_preamble.size();


	//printf("the size of the data vector is : %d \n",  int(d_data.size()));
	for (int offset=0; offset < d_data.size(); offset++ ){
		  if (d_data[offset] == 1)
			  d_vector_reg = (d_vector_reg << 1) | 1;
		  else
			  d_vector_reg = d_vector_reg << 1;
	}

	printf("the size of the preamble vector is : %d \n",  int(d_preamble.size()));
	for (int offset=0; offset < d_preamble.size(); offset++ ){
		  if (d_preamble[offset] == 1)
			  d_preamble_reg = (d_preamble_reg << 1) | 1;
		  else
			  d_preamble_reg = d_preamble_reg << 1;
	}

   //printf("Value of d_data_reg is %d \n", d_data_reg);
  // nothing else required in this example
}

/*
 * Our virtual destructor.
 */
howto_compare_vector_cci::~howto_compare_vector_cci ()
{
  // nothing else required in this example
}

int
howto_compare_vector_cci::general_work (int noutput_items,
			       gr_vector_int &ninput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{
  const unsigned char *in = (unsigned char *) input_items[0];
  unsigned char *out = (unsigned char *) output_items[0];

  unsigned int size = d_data.size() + d_preamble.size();

  unsigned int number_bits_preamble =0;
  unsigned int number_bits_data =0;

  //printf("number of noutput_items %d \n", noutput_items);
  for (int i = 0; i < noutput_items; i++){
	  //printf("Value of in_stream %d \n", in[i]);

	  //The first test is used to avoid the 31 bits of mask
	  //if(nbr_bits_usrp < 31){
		  //nbr_bits_usrp++;
		  //number_bits =0;
	  //}else{
	      if (preamble_received)
	    	  number_bits_data ++;
	      else
	    	  number_bits_preamble ++;

		  if (in[i] == 1)
			 d_shift_reg = (d_shift_reg << 1) | 1;
		  else
		     d_shift_reg = d_shift_reg << 1;

			  //if((number_bits % d_preamble.size()) == 0){
				  //preamble_received = is_same_vector(d_shift_reg, d_preamble_reg);
				  //if (number_bits ==32)
		  if(number_bits_preamble == d_preamble.size()){
			//compare shift_reg constructed to that of preamble reg
			//printf("d_shift_reg : %d d_preamble_reg: %d\n", d_shift_reg, d_preamble_reg);
			preamble_received = is_same_vector(d_shift_reg, d_preamble_reg);
			printf("valeur de d_shift_reg: %d \n", d_shift_reg );

			if (preamble_received){
			  printf("******************Preamble is received *************** : %d******* valeur %d\n", number_bits_preamble, d_shift_reg);
			  data_received = false;
			  //exit(1);
			  //number_bits = 1;
			}

			 number_bits_preamble = 0;
			 d_shift_reg = 0;

		   }

			  //}

		  if ((number_bits_data == d_data.size()) && (preamble_received)){
			  //printf("Number of bits  %d \n",number_bits);
			  //printf("***************\n");
			  //printf("d_shift_reg %d \n",d_shift_reg);
			  //printf("***************\n");

			  data_received = is_same_vector(d_shift_reg, d_vector_reg);
			  printf("valeur de d_shift_reg: %d \n", d_shift_reg );

			  if (data_received){
			      printf("******************Data is received *************** : %d******* valeur %d\n", number_bits_data, d_shift_reg);
			      is_same_vector_number++;
			      preamble_received = false;
			  }else{
				  is_same_vector_number =0;
			  }

			  number_bits_data = 0;
			  d_shift_reg = 0;


		  }

		  if (is_same_vector_number == (d_iteration_data_reg - 1)){
			 is_same_vector_number =0;
			 exit(1);
		  }

	   out[i] = in[i];
  }
  //printf("Value of the output %d \n",d_shift_reg);

  //
  // Tell runtime system how many input items we consumed on
  // each input stream.
  // This instruction allow the flow graph to be stable and to protect the stream across the block.
  consume_each (noutput_items);


  return noutput_items;
}


bool howto_compare_vector_cci::is_same_vector(int d_shift_reg, int d_vector_reg){

	int exclusive = (d_vector_reg &0xffffffff) ^ (d_shift_reg&0xffffffff);

    int count_error = 0;

	for (int i = 0; i < d_size; i++)
		if (exclusive & (1<<i)){
			count_error++;
		}
	//printf("********Begin is same vector function \n");
	//printf("valeur de count error is : %d \n", count_error);
	//printf("valeur de d_shift_reg: %d \n", d_shift_reg );
	if (count_error < d_min_threshold_error){
		//printf("*Yes, Value is equal \n");
		is_same_vector_value = true;
		is_same_vector_number ++;
		//printf("valeur de d_vector_reg: %d \n", d_vector_reg );
		//printf("valeur de d_shift_reg: %d \n", d_shift_reg );
		//printf("Number of vectors found  %d \n",is_same_vector_number);
	}
	else{
		is_same_vector_value = false;
	}
	//printf("********End is same vector function \n");

	return is_same_vector_value;
}

